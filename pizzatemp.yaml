esphome:
  name: pizzatemp
  friendly_name: PiZZaTemp

esp8266:
  board: d1_mini_pro

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "FVMS0nlgr7wuxyAXtNczQWghE7D0OcXfbz1v0EF9uAs="

ota:
  password: "2a00638896cc4e53e5f839b91c4a32f4"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Pizzatemp Fallback Hotspot"
    password: "eK3pOVxNdE6U"

captive_portal:


spi:
  miso_pin: GPIO12
  mosi_pin: GPIO13
  clk_pin: GPIO14

sensor:
  - platform: max31865
    name: "Pizza Oven Temperature"
    id: pizza_temp
    cs_pin: GPIO16
    reference_resistance: 4300 Ω
    rtd_nominal_resistance: 1000 Ω
    rtd_wires: 2
    update_interval: 5s
    mains_filter: 50 Hz
    
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    id: wifi_signal_perc
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"

  - platform: adc
    pin: A0
    id: u_bat
    name: "PizzaTemp Battery Voltage"
    update_interval: 60s
    filters:
      - multiply: 4.1961
  - platform: template
    name: "Bat SoC"
    id: soc
    unit_of_measurement: "%"
    update_interval: 10s
    lambda: 'return min(max((id(u_bat).state-2.75)/(4.2-2.75)*100.0,0.0),100.0);'

web_server:
  port: 80

i2c:
  sda: D2
  scl: D1


font:
  - file: 'arial.ttf'
    id: font1
    size: 24
  - file: 'arial.ttf'
    id: font2
    size: 10
  - file: 'arial.ttf'
    id: font3
    size: 8

display:
  - platform: ssd1306_i2c
    #model: "SSD1306 64x48" commented out for change to 1.3"
    model: "SH1106 128x64"
    #reset_pin: D4
    #address: 0x3C commented out for change to 1.3"
    lambda: |-
      it.printf(0, 0, id(font3), "PizzaTempIoT");
      if (id(pizza_temp).has_state()) {
        it.printf(60, 15, id(font1), TextAlign::TOP_LEFT , "%.0f°C", id(pizza_temp).state);
      }
      if (id(wifi_signal_perc).has_state()) {
        it.printf(0, 40, id(font2), "WiFi: %.0f%%", id(wifi_signal_perc).state);
      }
      if (id(u_bat).has_state()) {
        it.printf(60, 40, id(font2), "UBat: %.3fV", id(u_bat).state);
      }
      if (id(soc).has_state()) {
        it.printf(0, 50, id(font2), "SoC: %.0f%%", id(soc).state);
      }